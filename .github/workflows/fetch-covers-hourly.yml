name: Fetch Covers Hourly

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  fetch-covers:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ secrets.PHP_VERSION }}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ secrets.RUBY_VERSION }}
          bundler-cache: false

      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Ruby and Composer dependencies
        run: |
          gem install bundler
          bundle config set path 'vendor/bundle'
          bundle install --jobs 4 --retry 3
          
          if [ -f composer.json ]; then
            composer install --no-interaction --prefer-dist --optimize-autoloader
          fi

      - name: Run Discogs fetcher (build covers and .md)
        env:
          DISCOGS_USERNAME: ${{ secrets.DISCOGS_USERNAME }}
          DISCOGS_TOKEN: ${{ secrets.DISCOGS_TOKEN }}
        run: php bin/fetch_discogs_collection.php

      - name: Set Git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com" 

      - name: Check if there are changes
        id: check_changes
        run: |
          if git diff --quiet; then
            echo "No changes detected."
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected."
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup SSH key
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "${{ secrets.RSYNC_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.RSYNC_SSH_PORT }} -H ${{ secrets.RSYNC_HOST }} >> ~/.ssh/known_hosts

      - name: Create rsync exclude file
        if: steps.check_changes.outputs.changed == 'true'
        run: echo "${{ secrets.RSYNC_EXCLUDES }}" > rsync-exclude.txt

      - name: Build Jekyll site
        if: steps.check_changes.outputs.changed == 'true'
        run: bundle exec jekyll build
        env:
          JEKYLL_ENV: production

      - name: Deploy via rsync
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          rsync -avz -e "ssh -p ${{ secrets.RSYNC_SSH_PORT }}" --delete --exclude-from=rsync-exclude.txt _site/ ${{ secrets.RSYNC_USER }}@${{ secrets.RSYNC_HOST }}:${{ secrets.RSYNC_DEST_PATH }}
