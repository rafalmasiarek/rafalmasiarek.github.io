name: Build and Deploy Jekyll via rsync

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ secrets.PHP_VERSION }}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: false

      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Cache Composer dependencies
        if: exists('composer.json')
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Ruby dependencies
        run: |
          gem install bundler
          bundle config set path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      - name: Install Composer dependencies
        if: exists('composer.json')
        run: composer install --no-interaction --prefer-dist --no-progress

      - name: Run Discogs fetcher (build covers and .md)
        env:
          DISCOGS_USERNAME: ${{ secrets.DISCOGS_USERNAME }}
          DISCOGS_TOKEN: ${{ secrets.DISCOGS_TOKEN }}
        run: php bin/fetch_discogs_collection.php --clean

      - name: Build Jekyll site
        run: bundle exec jekyll build
        env:
          JEKYLL_ENV: production

      - name: Setup SSH key
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "${{ secrets.RSYNC_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.RSYNC_SSH_PORT }} -H ${{ secrets.RSYNC_HOST }} >> ~/.ssh/known_hosts

      - name: Create rsync exclude file
        run: echo "$RSYNC_EXCLUDES" > rsync-exclude.txt
        env:
          RSYNC_EXCLUDES: ${{ secrets.RSYNC_EXCLUDES }}

      - name: Deploy via rsync
        run: |
          rsync -avz -e "ssh -p ${{ secrets.RSYNC_SSH_PORT }}" --delete --exclude-from=rsync-exclude.txt _site/ ${{ secrets.RSYNC_USER }}@${{ secrets.RSYNC_HOST }}:${{ secrets.RSYNC_DEST_PATH }}
